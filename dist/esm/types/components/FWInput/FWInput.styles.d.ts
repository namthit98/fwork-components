/// <reference types="react" />
export declare const StyledInput: import("styled-components").StyledComponent<"input", any, any, string | number | symbol>;
export declare const StyledTextArea: import("styled-components").StyledComponent<"textarea", any, any, string | number | symbol>;
export declare const StyledWrapper: import("styled-components").StyledComponent<"div", any, {
    style?: import("react").CSSProperties;
    children?: import("react").ReactNode;
    slot?: string;
    title?: string;
    className?: string;
    color?: string;
    id?: string;
    lang?: string;
    role?: string;
    tabIndex?: number;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "none" | "list" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "time" | "true" | "false" | "step" | "page" | "location" | "date";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "copy" | "move" | "none" | "execute" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | "grid";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: (event: import("react").ClipboardEvent<HTMLDivElement>) => void;
    onCopyCapture?: (event: import("react").ClipboardEvent<HTMLDivElement>) => void;
    onCut?: (event: import("react").ClipboardEvent<HTMLDivElement>) => void;
    onCutCapture?: (event: import("react").ClipboardEvent<HTMLDivElement>) => void;
    onPaste?: (event: import("react").ClipboardEvent<HTMLDivElement>) => void;
    onPasteCapture?: (event: import("react").ClipboardEvent<HTMLDivElement>) => void;
    onCompositionEnd?: (event: import("react").CompositionEvent<HTMLDivElement>) => void;
    onCompositionEndCapture?: (event: import("react").CompositionEvent<HTMLDivElement>) => void;
    onCompositionStart?: (event: import("react").CompositionEvent<HTMLDivElement>) => void;
    onCompositionStartCapture?: (event: import("react").CompositionEvent<HTMLDivElement>) => void;
    onCompositionUpdate?: (event: import("react").CompositionEvent<HTMLDivElement>) => void;
    onCompositionUpdateCapture?: (event: import("react").CompositionEvent<HTMLDivElement>) => void;
    onFocus?: (event: import("react").FocusEvent<HTMLDivElement>) => void;
    onFocusCapture?: (event: import("react").FocusEvent<HTMLDivElement>) => void;
    onBlur?: (event: import("react").FocusEvent<HTMLDivElement>) => void;
    onBlurCapture?: (event: import("react").FocusEvent<HTMLDivElement>) => void;
    onChange?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onChangeCapture?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onBeforeInput?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onBeforeInputCapture?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onInput?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onInputCapture?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onReset?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onResetCapture?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onSubmit?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onSubmitCapture?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onInvalid?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onInvalidCapture?: (event: import("react").FormEvent<HTMLDivElement>) => void;
    onLoad?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onLoadCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onError?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onErrorCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onKeyDown?: (event: import("react").KeyboardEvent<HTMLDivElement>) => void;
    onKeyDownCapture?: (event: import("react").KeyboardEvent<HTMLDivElement>) => void;
    onKeyPress?: (event: import("react").KeyboardEvent<HTMLDivElement>) => void;
    onKeyPressCapture?: (event: import("react").KeyboardEvent<HTMLDivElement>) => void;
    onKeyUp?: (event: import("react").KeyboardEvent<HTMLDivElement>) => void;
    onKeyUpCapture?: (event: import("react").KeyboardEvent<HTMLDivElement>) => void;
    onAbort?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onAbortCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onCanPlay?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onCanPlayCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onCanPlayThrough?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onCanPlayThroughCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onDurationChange?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onDurationChangeCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onEmptied?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onEmptiedCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onEncrypted?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onEncryptedCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onEnded?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onEndedCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onLoadedData?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onLoadedDataCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onLoadedMetadata?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onLoadedMetadataCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onLoadStart?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onLoadStartCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onPause?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onPauseCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onPlay?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onPlayCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onPlaying?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onPlayingCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onProgress?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onProgressCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onRateChange?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onRateChangeCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onSeeked?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onSeekedCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onSeeking?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onSeekingCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onStalled?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onStalledCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onSuspend?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onSuspendCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onTimeUpdate?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onTimeUpdateCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onVolumeChange?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onVolumeChangeCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onWaiting?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onWaitingCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onAuxClick?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onAuxClickCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onClick?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onClickCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onContextMenu?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onContextMenuCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onDoubleClick?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onDoubleClickCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onDrag?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragCapture?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragEnd?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragEndCapture?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragEnter?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragEnterCapture?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragExit?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragExitCapture?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragLeave?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragLeaveCapture?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragOver?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragOverCapture?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragStart?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDragStartCapture?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDrop?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onDropCapture?: (event: import("react").DragEvent<HTMLDivElement>) => void;
    onMouseDown?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseDownCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseEnter?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseLeave?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseMove?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseMoveCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseOut?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseOutCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseOver?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseOverCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseUp?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onMouseUpCapture?: (event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void;
    onSelect?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onSelectCapture?: (event: import("react").SyntheticEvent<HTMLDivElement, Event>) => void;
    onTouchCancel?: (event: import("react").TouchEvent<HTMLDivElement>) => void;
    onTouchCancelCapture?: (event: import("react").TouchEvent<HTMLDivElement>) => void;
    onTouchEnd?: (event: import("react").TouchEvent<HTMLDivElement>) => void;
    onTouchEndCapture?: (event: import("react").TouchEvent<HTMLDivElement>) => void;
    onTouchMove?: (event: import("react").TouchEvent<HTMLDivElement>) => void;
    onTouchMoveCapture?: (event: import("react").TouchEvent<HTMLDivElement>) => void;
    onTouchStart?: (event: import("react").TouchEvent<HTMLDivElement>) => void;
    onTouchStartCapture?: (event: import("react").TouchEvent<HTMLDivElement>) => void;
    onPointerDown?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerDownCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerMove?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerMoveCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerUp?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerUpCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerCancel?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerCancelCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerEnter?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerEnterCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerLeave?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerLeaveCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerOver?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerOverCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerOut?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onPointerOutCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onGotPointerCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onGotPointerCaptureCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onLostPointerCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onLostPointerCaptureCapture?: (event: import("react").PointerEvent<HTMLDivElement>) => void;
    onScroll?: (event: import("react").UIEvent<HTMLDivElement, UIEvent>) => void;
    onScrollCapture?: (event: import("react").UIEvent<HTMLDivElement, UIEvent>) => void;
    onWheel?: (event: import("react").WheelEvent<HTMLDivElement>) => void;
    onWheelCapture?: (event: import("react").WheelEvent<HTMLDivElement>) => void;
    onAnimationStart?: (event: import("react").AnimationEvent<HTMLDivElement>) => void;
    onAnimationStartCapture?: (event: import("react").AnimationEvent<HTMLDivElement>) => void;
    onAnimationEnd?: (event: import("react").AnimationEvent<HTMLDivElement>) => void;
    onAnimationEndCapture?: (event: import("react").AnimationEvent<HTMLDivElement>) => void;
    onAnimationIteration?: (event: import("react").AnimationEvent<HTMLDivElement>) => void;
    onAnimationIterationCapture?: (event: import("react").AnimationEvent<HTMLDivElement>) => void;
    onTransitionEnd?: (event: import("react").TransitionEvent<HTMLDivElement>) => void;
    onTransitionEndCapture?: (event: import("react").TransitionEvent<HTMLDivElement>) => void;
    key?: import("react").ReactText;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    contentEditable?: boolean | "inherit" | "true" | "false";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    translate?: "no" | "yes";
    radioGroup?: string;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
    is?: string;
    ref?: ((instance: HTMLDivElement) => void) | import("react").RefObject<HTMLDivElement>;
    theme: any;
}, "style" | "children" | "ref" | "slot" | "title" | "theme" | "className" | "color" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is">;
export declare const StyledRequiredIcon: import("styled-components").StyledComponent<"span", any, {
    style?: import("react").CSSProperties;
    children?: import("react").ReactNode;
    slot?: string;
    title?: string;
    className?: string;
    color?: string;
    id?: string;
    lang?: string;
    role?: string;
    tabIndex?: number;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "true" | "false";
    'aria-autocomplete'?: "none" | "list" | "inline" | "both";
    'aria-busy'?: boolean | "true" | "false";
    'aria-checked'?: boolean | "true" | "false" | "mixed";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "time" | "true" | "false" | "step" | "page" | "location" | "date";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "true" | "false";
    'aria-dropeffect'?: "link" | "copy" | "move" | "none" | "execute" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "true" | "false";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "true" | "false";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "listbox" | "tree" | "grid";
    'aria-hidden'?: boolean | "true" | "false";
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "true" | "false";
    'aria-multiline'?: boolean | "true" | "false";
    'aria-multiselectable'?: boolean | "true" | "false";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "true" | "false" | "mixed";
    'aria-readonly'?: boolean | "true" | "false";
    'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "true" | "false";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "true" | "false";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: (event: import("react").ClipboardEvent<HTMLSpanElement>) => void;
    onCopyCapture?: (event: import("react").ClipboardEvent<HTMLSpanElement>) => void;
    onCut?: (event: import("react").ClipboardEvent<HTMLSpanElement>) => void;
    onCutCapture?: (event: import("react").ClipboardEvent<HTMLSpanElement>) => void;
    onPaste?: (event: import("react").ClipboardEvent<HTMLSpanElement>) => void;
    onPasteCapture?: (event: import("react").ClipboardEvent<HTMLSpanElement>) => void;
    onCompositionEnd?: (event: import("react").CompositionEvent<HTMLSpanElement>) => void;
    onCompositionEndCapture?: (event: import("react").CompositionEvent<HTMLSpanElement>) => void;
    onCompositionStart?: (event: import("react").CompositionEvent<HTMLSpanElement>) => void;
    onCompositionStartCapture?: (event: import("react").CompositionEvent<HTMLSpanElement>) => void;
    onCompositionUpdate?: (event: import("react").CompositionEvent<HTMLSpanElement>) => void;
    onCompositionUpdateCapture?: (event: import("react").CompositionEvent<HTMLSpanElement>) => void;
    onFocus?: (event: import("react").FocusEvent<HTMLSpanElement>) => void;
    onFocusCapture?: (event: import("react").FocusEvent<HTMLSpanElement>) => void;
    onBlur?: (event: import("react").FocusEvent<HTMLSpanElement>) => void;
    onBlurCapture?: (event: import("react").FocusEvent<HTMLSpanElement>) => void;
    onChange?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onChangeCapture?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onBeforeInput?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onBeforeInputCapture?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onInput?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onInputCapture?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onReset?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onResetCapture?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onSubmit?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onSubmitCapture?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onInvalid?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onInvalidCapture?: (event: import("react").FormEvent<HTMLSpanElement>) => void;
    onLoad?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onLoadCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onError?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onErrorCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onKeyDown?: (event: import("react").KeyboardEvent<HTMLSpanElement>) => void;
    onKeyDownCapture?: (event: import("react").KeyboardEvent<HTMLSpanElement>) => void;
    onKeyPress?: (event: import("react").KeyboardEvent<HTMLSpanElement>) => void;
    onKeyPressCapture?: (event: import("react").KeyboardEvent<HTMLSpanElement>) => void;
    onKeyUp?: (event: import("react").KeyboardEvent<HTMLSpanElement>) => void;
    onKeyUpCapture?: (event: import("react").KeyboardEvent<HTMLSpanElement>) => void;
    onAbort?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onAbortCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onCanPlay?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onCanPlayCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onCanPlayThrough?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onCanPlayThroughCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onDurationChange?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onDurationChangeCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onEmptied?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onEmptiedCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onEncrypted?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onEncryptedCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onEnded?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onEndedCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onLoadedData?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onLoadedDataCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onLoadedMetadata?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onLoadedMetadataCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onLoadStart?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onLoadStartCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onPause?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onPauseCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onPlay?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onPlayCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onPlaying?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onPlayingCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onProgress?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onProgressCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onRateChange?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onRateChangeCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onSeeked?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onSeekedCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onSeeking?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onSeekingCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onStalled?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onStalledCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onSuspend?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onSuspendCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onTimeUpdate?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onTimeUpdateCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onVolumeChange?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onVolumeChangeCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onWaiting?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onWaitingCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onAuxClick?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onAuxClickCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onClick?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onClickCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onContextMenu?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onContextMenuCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onDoubleClick?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onDoubleClickCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onDrag?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragCapture?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragEnd?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragEndCapture?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragEnter?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragEnterCapture?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragExit?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragExitCapture?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragLeave?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragLeaveCapture?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragOver?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragOverCapture?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragStart?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDragStartCapture?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDrop?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onDropCapture?: (event: import("react").DragEvent<HTMLSpanElement>) => void;
    onMouseDown?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseDownCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseEnter?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseLeave?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseMove?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseMoveCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseOut?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseOutCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseOver?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseOverCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseUp?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onMouseUpCapture?: (event: import("react").MouseEvent<HTMLSpanElement, MouseEvent>) => void;
    onSelect?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onSelectCapture?: (event: import("react").SyntheticEvent<HTMLSpanElement, Event>) => void;
    onTouchCancel?: (event: import("react").TouchEvent<HTMLSpanElement>) => void;
    onTouchCancelCapture?: (event: import("react").TouchEvent<HTMLSpanElement>) => void;
    onTouchEnd?: (event: import("react").TouchEvent<HTMLSpanElement>) => void;
    onTouchEndCapture?: (event: import("react").TouchEvent<HTMLSpanElement>) => void;
    onTouchMove?: (event: import("react").TouchEvent<HTMLSpanElement>) => void;
    onTouchMoveCapture?: (event: import("react").TouchEvent<HTMLSpanElement>) => void;
    onTouchStart?: (event: import("react").TouchEvent<HTMLSpanElement>) => void;
    onTouchStartCapture?: (event: import("react").TouchEvent<HTMLSpanElement>) => void;
    onPointerDown?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerDownCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerMove?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerMoveCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerUp?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerUpCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerCancel?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerCancelCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerEnter?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerEnterCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerLeave?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerLeaveCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerOver?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerOverCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerOut?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onPointerOutCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onGotPointerCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onGotPointerCaptureCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onLostPointerCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onLostPointerCaptureCapture?: (event: import("react").PointerEvent<HTMLSpanElement>) => void;
    onScroll?: (event: import("react").UIEvent<HTMLSpanElement, UIEvent>) => void;
    onScrollCapture?: (event: import("react").UIEvent<HTMLSpanElement, UIEvent>) => void;
    onWheel?: (event: import("react").WheelEvent<HTMLSpanElement>) => void;
    onWheelCapture?: (event: import("react").WheelEvent<HTMLSpanElement>) => void;
    onAnimationStart?: (event: import("react").AnimationEvent<HTMLSpanElement>) => void;
    onAnimationStartCapture?: (event: import("react").AnimationEvent<HTMLSpanElement>) => void;
    onAnimationEnd?: (event: import("react").AnimationEvent<HTMLSpanElement>) => void;
    onAnimationEndCapture?: (event: import("react").AnimationEvent<HTMLSpanElement>) => void;
    onAnimationIteration?: (event: import("react").AnimationEvent<HTMLSpanElement>) => void;
    onAnimationIterationCapture?: (event: import("react").AnimationEvent<HTMLSpanElement>) => void;
    onTransitionEnd?: (event: import("react").TransitionEvent<HTMLSpanElement>) => void;
    onTransitionEndCapture?: (event: import("react").TransitionEvent<HTMLSpanElement>) => void;
    key?: import("react").ReactText;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    contentEditable?: boolean | "inherit" | "true" | "false";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "true" | "false";
    hidden?: boolean;
    placeholder?: string;
    spellCheck?: boolean | "true" | "false";
    translate?: "no" | "yes";
    radioGroup?: string;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
    is?: string;
    ref?: ((instance: HTMLSpanElement) => void) | import("react").RefObject<HTMLSpanElement>;
    theme: any;
}, "style" | "children" | "ref" | "slot" | "title" | "theme" | "className" | "color" | "id" | "lang" | "role" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "placeholder" | "spellCheck" | "translate" | "radioGroup" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is">;
